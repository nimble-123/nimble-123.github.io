<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Just My Two Cents]]></title>
  <link href="http://nlsltz.github.io/atom.xml" rel="self"/>
  <link href="http://nlsltz.github.io/"/>
  <updated>2014-11-22T20:51:13+01:00</updated>
  <id>http://nlsltz.github.io/</id>
  <author>
    <name><![CDATA[Nils Lutz]]></name>
    <email><![CDATA[info@nilslutz.de]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenVPN auf dem RaspberryPi einrichten]]></title>
    <link href="http://nlsltz.github.io/2014/10/21/openvpn-auf-dem-raspberry-pi-einrichten/"/>
    <updated>2014-10-21T17:00:00+02:00</updated>
    <id>http://nlsltz.github.io/2014/10/21/openvpn-auf-dem-raspberry-pi-einrichten</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://nlsltz.github.io/images/openvpn.png" width="200" height="200" title="OpenVPN Logo" alt="OpenVPN Logo">Da man in letzter Zeit ja immer öfters hört, wie wir alle massenweise ausspioniert werden. War es an der Zeit mein Netzwerk Zuhause ein wenig mehr abzusichern. Ich habe auch gerne Zugriff auf meine Geräte von außerhalb. Um einerseits den Status meines Pi zu überprüfen oder aber um meinem Medien Server bei Bedarf zu starten. Bisher hatte ich immer fahrlässig meinen Port <code>22</code> vom Pi ins Internet geöffnet.<!-- more --></p>

<p>Da das aber jedem mit auch nur ein bisschen Skill die Türen zu meinem Netzwerk öffnete, sollte dieser Umstand so schnell es geht behoben werden. So kam <a href="https://openvpn.net/">OpenVPN</a> auf den Plan. OpenVPN ist eine Open Source Applikation, die mit SSL/TLS verschlüsselt und auch Clients für sämtliche Plattformen(Android, iOS, Windows, OS X, Linux) anbietet. Nachfolgend erkläre ich die Installation des Servers auf dem Raspberry Pi, sowie die Client Konfiguration.</p>

<h2>Schritt 1</h2>

<p>OpenVPN und OpenSSL Pakete auf dem Pi installieren.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install openvpn opensll
</span></code></pre></td></tr></table></div></figure>


<h2>Schritt 2</h2>

<p>Damit die Schlüssel für die Authentifizierung generiert werden können nutzen wir die mitgelieferte Easy-RSA Skripte. Bevor wir sie allerdings nutzen kopieren wir sie in das Konfigurationsverzeichnis von OpenVPN.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp -r /usr/share/doc/openvpn/examples/easy-rsa/2.0 /etc/openvpn/easy-rsa
</span></code></pre></td></tr></table></div></figure>


<h2>Schritt 3</h2>

<p>Als nächsten werden die Grundeinstellungen an unsere Bedürfnisse angepasst. Dies geschieht in der Datei <code>/etc/openvpn/easy-rsa/vars</code>. In Zeile 15 muss das Verzeichnis von Easy-RSA angegeben werden. Zusätzlich ändern wir noch in Zeile 53 die Schlüssellänge auf 2048bit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">EASY_RSA</span><span class="o">=</span><span class="s2">&quot;/etc/openvpn/easy-rsa&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">KEY_SIZE</span><span class="o">=</span>2048
</span></code></pre></td></tr></table></div></figure>


<h2>Schritt 4</h2>

<p>Wir wechseln ins Easy-RSA Verzeichnis und versorgen uns mit Root Rechten.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /etc/openvpn/easy-rsa
</span><span class='line'>sudo su
</span><span class='line'><span class="nb">source </span>vars
</span></code></pre></td></tr></table></div></figure>


<p>Weiter benötigen die Easy-RSA Skripte eine OpenSSL Konfiguration, welche wir uns einfach mit einem symbolischen Link erstellen</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s openssl-1.0.0.cnf openssl.cnf
</span></code></pre></td></tr></table></div></figure>


<h2>Schritt 5</h2>

<p>So da nun alles eingestellt ist können wir damit beginnen die Zertifikate und Schlüssel zu erzeugen.</p>

<p>Der zweite Befehl fragt eine Reihe von Informationen ab. Lediglich das Land ist wichtig für unsere Konfiguration, der Rest kann außer Acht gelassen werden.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./clean-all
</span><span class='line'>./build-ca &lt;NAME DES VPNs&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Der nächste Befehl erzeugt aus dem zuvor erstellten Root Zertifikat einen Schlüssel für den Server. Auch hier werden wieder einige Informationen abgefragt. Das <code>Challenge Password</code> kann leer gelassen werden.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./build-key-server server
</span></code></pre></td></tr></table></div></figure>


<p>Zu letzt werden noch die Diffie-Hellman-Parameter generiert. Dadurch wird ein sicherer Schlüsselaustausch ermöglicht.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./build-dh
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Schritt 6</h2>

<p>Zertifikate und Schlüssel sind generiert. Also können wir uns jetzt um die OpenVPN Server Konfiguration kümmern.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo nano /etc/openvpn/openvpn.conf
</span></code></pre></td></tr></table></div></figure>


<p>In diese Datei gehört folgender Inhalt. Es werden die Orte der Zertifikate und Schlüssel angegeben. Die verwendeten Verschlüsselungsmodi lassen sich auch hier einstellen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mode server
</span><span class='line'>tls-server
</span><span class='line'>
</span><span class='line'><span class="c"># virtual interface for vpn</span>
</span><span class='line'>dev tun
</span><span class='line'>
</span><span class='line'><span class="c"># protocol for port</span>
</span><span class='line'>proto udp
</span><span class='line'>
</span><span class='line'><span class="c"># port for vpn</span>
</span><span class='line'>port 1194
</span><span class='line'>
</span><span class='line'><span class="c"># keys and certificates</span>
</span><span class='line'>ca /etc/openvpn/easy-rsa/keys/ca.crt
</span><span class='line'>cert /etc/openvpn/easy-rsa/keys/server.crt
</span><span class='line'>key /etc/openvpn/easy-rsa/keys/server.key
</span><span class='line'>dh /etc/openvpn/easy-rsa/keys/dh2048.pem
</span><span class='line'>
</span><span class='line'><span class="c"># tls-auth server</span>
</span><span class='line'>key-direction 0
</span><span class='line'>tls-auth /etc/openvpn/easy-rsa/keys/ta.key
</span><span class='line'>
</span><span class='line'><span class="c"># cipher suites</span>
</span><span class='line'>cipher AES-256-CBC
</span><span class='line'>auth SHA512
</span><span class='line'>tls-cipher DHE-RSA-AES256-SHA
</span><span class='line'>
</span><span class='line'><span class="c"># user and group</span>
</span><span class='line'>user nobody
</span><span class='line'>group nogroup
</span><span class='line'>
</span><span class='line'><span class="c"># used subnet for vpn</span>
</span><span class='line'>server 10.0.1.0 255.255.255.0
</span><span class='line'>
</span><span class='line'><span class="c"># persistance</span>
</span><span class='line'>persist-key
</span><span class='line'>persist-tun
</span><span class='line'>
</span><span class='line'><span class="c"># logging</span>
</span><span class='line'>status /var/log/openvpn-status.log
</span><span class='line'>verb 3
</span><span class='line'>log-append /var/log/openvpn
</span><span class='line'>
</span><span class='line'><span class="c"># routing</span>
</span><span class='line'>client-to-client
</span><span class='line'>push <span class="s2">&quot;redirect-gateway def1 bypass-dhcp&quot;</span>
</span><span class='line'>push <span class="s2">&quot;dhcp-option DNS 85.214.20.141&quot;</span>
</span><span class='line'>push <span class="s2">&quot;dhcp-option DNS 8.8.8.8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># compression</span>
</span><span class='line'>comp-lzo
</span><span class='line'>
</span><span class='line'><span class="c"># keep vpn session alive</span>
</span><span class='line'>keepalive <span class="m">10</span> 120
</span><span class='line'>
</span><span class='line'><span class="c"># user auth with username/password</span>
</span><span class='line'><span class="p">;</span>plugin /usr/lib/openvpn/openvpn-auth-pam.so login
</span><span class='line'><span class="p">;</span>client-cert-not-required<span class="p">;</span>
</span><span class='line'><span class="p">;</span>username-as-common-name
</span><span class='line'>
</span><span class='line'><span class="c"># certificate revocation list</span>
</span><span class='line'><span class="p">;</span>crl-verify /etc/openvpn/crl.pem
</span></code></pre></td></tr></table></div></figure>


<h2>Schritt 7</h2>

<p>Damit man vom Client auch eine Verbindung ins Internet über den OpenVPN Server bekommt muss eine Weiterleitung in der Firewall eingestellt werden. Diese Einstellung soll einen Neustart des Servers überstehen weshalb wir uns das folgende Skript anlegen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo nano /etc/init.d/rpivpn
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'><span class="c">### BEGIN INIT INFO</span>
</span><span class='line'><span class="c"># Provides:          rpivpn</span>
</span><span class='line'><span class="c"># Required-Start:    $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Required-Stop:     $remote_fs $syslog</span>
</span><span class='line'><span class="c"># Default-Start:     2 3 4 5</span>
</span><span class='line'><span class="c"># Default-Stop:      0 1 6</span>
</span><span class='line'><span class="c"># Short-Description: VPN initialisation script</span>
</span><span class='line'><span class="c">### END INIT INFO</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;echo &quot;1&quot;  &gt; /proc/sys/net/ipv4/ip_forward&#39;</span> <span class="p">|</span> sudo -s
</span><span class='line'>sudo iptables -A INPUT -i tun+ -j ACCEPT
</span><span class='line'>sudo iptables -A FORWARD -i tun+ -j ACCEPT
</span><span class='line'>sudo iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
</span><span class='line'>sudo iptables -t nat -F POSTROUTING
</span><span class='line'>sudo iptables -t nat -A POSTROUTING -s 10.0.1.0/24 -o eth0 -j MASQUERADE
</span></code></pre></td></tr></table></div></figure>


<p>Nur noch die Rechte anpassen und dann einmal per Hand ausführen. Zusätzlich kommt das Skript noch in den Autostart.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chmod +x /etc/init.d/rpivpn
</span><span class='line'>sudo update-rc.de rpivpn defaults
</span><span class='line'>sudo /etc/init.d/rpivpn
</span><span class='line'>sudo /etc/init.d/openvpn restart
</span></code></pre></td></tr></table></div></figure>


<h2>Schritt 8</h2>

<p>Damit wäre die Arbeit für den OpenVPN Server erledigt. Widmen wir uns nun der Client Konfiguration. Erstmal benötigen wir wieder Root Rechte und dann erzeugen wir uns ein Skript um automatisiert Client Konfigurationen erstellen zu können. Lediglich der Speicherort der fertigen Konfiguration muss angepasst werden im Skript.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo su
</span><span class='line'><span class="nb">cd</span> /etc/openvpn/easy-rsa/
</span><span class='line'>nano build-client-config
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="c"># Script to automate creating new OpenVPN clients</span>
</span><span class='line'><span class="c"># The client cert and key, along with the CA cert is</span>
</span><span class='line'><span class="c"># zipped up and placed somewhere to download securely</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># H Cooper - 05/02/11</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># edited by: N Lutz - 17.10.2014 info@nilslutz.de</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Usage: build-client-config &lt;common-name&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set where we&#39;re working from</span>
</span><span class='line'><span class="nv">OPENVPN_DIR</span><span class="o">=</span>/etc/openvpn
</span><span class='line'><span class="nv">OPENVPN_RSA_DIR</span><span class="o">=</span>/etc/openvpn/easy-rsa
</span><span class='line'><span class="nv">OPENVPN_KEYS</span><span class="o">=</span><span class="nv">$OPENVPN_RSA_DIR</span>/keys
</span><span class='line'><span class="nv">KEY_DOWNLOAD_PATH</span><span class="o">=</span>&lt;OVPN SPEICHERORT&gt;
</span><span class='line'>
</span><span class='line'><span class="c"># Either read the CN from $1 or prompt for it</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$1&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span> <span class="nb">echo</span> -n <span class="s2">&quot;Enter new client common name (CN): &quot;</span>
</span><span class='line'>  <span class="nb">read</span> -e CN
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nv">CN</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Ensure CN isn&#39;t blank</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$CN&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span> <span class="nb">echo</span> <span class="s2">&quot;You must provide a CN.&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Check the CN doesn&#39;t already exist</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -f <span class="nv">$OPENVPN_KEYS</span>/<span class="nv">$CN</span>.crt <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span> <span class="nb">echo</span> <span class="s2">&quot;Error: certificate with the CN $CN alread exists!&quot;</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;    $OPENVPN_KEYS/$CN.crt&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Enter the easy-rsa directory and establish the default variables</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$OPENVPN_RSA_DIR</span>
</span><span class='line'><span class="nb">source</span> ./vars &gt; /dev/null
</span><span class='line'><span class="nb">export </span><span class="nv">KEY_CN</span><span class="o">=</span><span class="s2">&quot;$CN&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Copied from build-key script (to ensure it works!)</span>
</span><span class='line'><span class="nb">export </span><span class="nv">EASY_RSA</span><span class="o">=</span><span class="s2">&quot;${EASY_RSA:-.}&quot;</span>
</span><span class='line'><span class="s2">&quot;$EASY_RSA/pkitool&quot;</span> --batch <span class="nv">$CN</span>
</span><span class='line'>
</span><span class='line'><span class="c"># cat keys and certs inline the .opvn file for easier exchange</span>
</span><span class='line'><span class="nv">DEFAULT</span><span class="o">=</span><span class="s2">&quot;default.ovpn&quot;</span>
</span><span class='line'><span class="nv">FILEEXT</span><span class="o">=</span><span class="s2">&quot;.ovpn&quot;</span>
</span><span class='line'><span class="nv">CRT</span><span class="o">=</span><span class="s2">&quot;.crt&quot;</span>
</span><span class='line'><span class="nv">CSR</span><span class="o">=</span><span class="s2">&quot;.csr&quot;</span>
</span><span class='line'><span class="nv">KEY</span><span class="o">=</span><span class="s2">&quot;.key&quot;</span>
</span><span class='line'><span class="nv">CA</span><span class="o">=</span><span class="s2">&quot;ca.crt&quot;</span>
</span><span class='line'><span class="nv">TA</span><span class="o">=</span><span class="s2">&quot;ta.key&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#1st Verify that client&#39;s Public Key Exists</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$OPENVPN_KEYS</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$CN$CRT</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'> <span class="nb">echo</span> <span class="s2">&quot;[ERROR]: Client Public Key Certificate not found: $CN$CRT&quot;</span>
</span><span class='line'> <span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Client&#39;s cert found: $CN$CR&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Then, verify that there is a private key for that client</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$CN$KEY</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'> <span class="nb">echo</span> <span class="s2">&quot;[ERROR]: Client Private Key not found: $CN$KEY&quot;</span>
</span><span class='line'> <span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Client&#39;s Private Key found: $CN$KEY&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Confirm the CA public key exists</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$CA</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'> <span class="nb">echo</span> <span class="s2">&quot;[ERROR]: CA Public Key not found: $CA&quot;</span>
</span><span class='line'> <span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;CA public Key found: $CA&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Confirm the tls-auth ta key file exists</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$TA</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'> <span class="nb">echo</span> <span class="s2">&quot;[ERROR]: tls-auth Key not found: $TA&quot;</span>
</span><span class='line'> <span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;tls-auth Private Key found: $TA&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Ready to make a new .opvn file - Start by populating with the default file</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$KEY_DOWNLOAD_PATH</span>
</span><span class='line'>cat <span class="nv">$OPENVPN_RSA_DIR</span>/<span class="nv">$DEFAULT</span> &gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Now, append the CA Public Cert</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;ca&gt;&quot;</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>cat <span class="nv">$OPENVPN_DIR</span>/<span class="nv">$CA</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;/ca&gt;&quot;</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Next append the client Public Cert</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;cert&gt;&quot;</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>cat <span class="nv">$OPENVPN_KEYS</span>/<span class="nv">$CN$CRT</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;/cert&gt;&quot;</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Then, append the client Private Key</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;key&gt;&quot;</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>cat <span class="nv">$OPENVPN_KEYS</span>/<span class="nv">$CN$KEY</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;/key&gt;&quot;</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Finally, append the TA Private Key</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;key direction 1&quot;</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;tls-auth&gt;&quot;</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>cat <span class="nv">$OPENVPN_DIR</span>/<span class="nv">$TA</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;/tls-auth&gt;&quot;</span> &gt;&gt; <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Take the new cert and place it somewhere it can be downloaded securely</span>
</span><span class='line'>chmod <span class="m">666</span> <span class="nv">$CN$FILEEXT</span>
</span><span class='line'>rm <span class="nv">$OPENVPN_KEYS</span>/<span class="nv">$CN$CRT</span>
</span><span class='line'>rm <span class="nv">$OPENVPN_KEYS</span>/<span class="nv">$CN$KEY</span>
</span><span class='line'>rm <span class="nv">$OPENVPN_KEYS</span>/<span class="nv">$CN$CSR</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dieses Skript benötigt eine <code>default.ovpn</code> Datei in der die Standard Konfiguration enthalten ist bis auf die Client Schlüssel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo su
</span><span class='line'><span class="nb">cd</span> /etc/openvpn/easy-rsa/
</span><span class='line'>nano default.ovpn
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mode client
</span><span class='line'>
</span><span class='line'><span class="c"># interface to use for vpn</span>
</span><span class='line'>dev tun
</span><span class='line'>
</span><span class='line'><span class="c"># protocol to use for vpn</span>
</span><span class='line'>proto udp
</span><span class='line'>
</span><span class='line'><span class="c"># hostname/ip of vpn server</span>
</span><span class='line'>remote nilslutz.de <span class="m">1194</span>
</span><span class='line'>
</span><span class='line'><span class="c"># hostname lookup of vpn server</span>
</span><span class='line'>resolv-retry infinite
</span><span class='line'>
</span><span class='line'><span class="c"># no local port bind is necessary</span>
</span><span class='line'>nobind
</span><span class='line'>
</span><span class='line'><span class="c"># persistance</span>
</span><span class='line'>persist-key
</span><span class='line'>persist-tun
</span><span class='line'>
</span><span class='line'><span class="c"># compression</span>
</span><span class='line'>comp-lzo
</span><span class='line'>
</span><span class='line'><span class="c"># logging</span>
</span><span class='line'>verb 3
</span><span class='line'>
</span><span class='line'><span class="c"># cipher suites</span>
</span><span class='line'>cipher AES-256-CBC
</span><span class='line'>auth SHA512
</span><span class='line'>tls-cipher DHE-RSA-AES256-SHA
</span><span class='line'>
</span><span class='line'><span class="c"># server cert verification</span>
</span><span class='line'>remote-cert-tls server
</span><span class='line'>
</span><span class='line'><span class="c"># public/private keys and CA</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nachdem auch dieses Skript angelegt ist lassen sich damit Client Konfigurationen anlegen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./build-client-config &lt;CLIENT NAME&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Die damit erstelle <code>.ovpn</code> Datei kann dann an den Client weitergegeben werden. Ob nun über eine Website, Mail oder sonstiges ist jedem selbst überlassen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Umstieg von Wordpress auf Octopress]]></title>
    <link href="http://nlsltz.github.io/2014/09/04/umstieg-von-wordpress-auf-octopress/"/>
    <updated>2014-09-04T17:05:46+02:00</updated>
    <id>http://nlsltz.github.io/2014/09/04/umstieg-von-wordpress-auf-octopress</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://nlsltz.github.io/images/octopress.png" width="200" height="200" title="Octopress Logo" alt="Octopress Logo">Nach 7 Monaten der erste Beitrag wieder. Irgendwie war mir Wordpress zu klobig, zu vollgestopft mit Plugins. Octopress kannte ich schon etwas länger und es gefiel mir direkt als ich den ersten Blog damit gesehen habe. Optisch sehr schlicht und einfach gehalten zeigt Octopress seine wahre Stärke in der einfachheit im Backend. Wer sich auf der Shell zuhause fühlt ist mit <a href="http://www.octopress.org/">Octopress</a> auf jedenfall gut beraten.<!-- more --></p>

<p>Das ganze ging relativ einfach. Im Wordpress Backend die Export Funktion genutzt um ein XML-File mit sämtlichen Posts zu generieren. Anschließend habe ich die <a href="https://github.com/imathis/octopress">Github Repo von Octopress</a> geforked, da ich spätere Änderungen am Blog gern so sichern würde. Den restlichen Blog habe ich nach dem Octopress Start Guide durchgeführt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/nlsltz/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>


<p>Über ein kleines <a href="https://github.com/thomasf/exitwp">Python Script</a> habe ich meine exportierten Posts in das Markdown Format von Octopress umgewandelt. Die umgewandelten Posts nur noch in <code>octopress/source/_posts/</code> eingefügt und den Befehl zum erstellen des Blogs abgesetzt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span></code></pre></td></tr></table></div></figure>


<p>Nun findet sich im <code>public</code> Ordner der gesamte erstellte Blog, fertig für den Webserver zum verteilen. Über die drei <code>rake</code> Befehle lässt sich Octopress am Terminal bedienen,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate <span class="c"># blog erstellen</span>
</span><span class='line'>rake preview  <span class="c"># preview der Posts</span>
</span><span class='line'>rake watch    <span class="c"># live tracking von änderungen</span>
</span></code></pre></td></tr></table></div></figure>


<p>Als nächstes möchte ich dem Blog noch ein neues Theme und ein paar Plugins verpassen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plex Media Server einrichten]]></title>
    <link href="http://nlsltz.github.io/2014/02/16/plex-media-server-einrichten/"/>
    <updated>2014-02-16T16:11:20+01:00</updated>
    <id>http://nlsltz.github.io/2014/02/16/plex-media-server-einrichten</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://nlsltz.github.io/images/plex-logo.png" width="300" height="300" title="Plex Logo" alt="Plex Logo">Heute hatte ich endlich die Zeit mich mit dem Medien Server <a href="https://plex.tv/">Plex</a> auseinander zusetzen. Bisher habe ich immer den <a href="http://www.ps3mediaserver.org/">PS3 Media Server</a> benutzt, welcher mir aber mehr und mehr missfiel. Das größte Problem waren fiese Ruckler, verursacht durch die DTS 5.1 Tonspur in den Filmen, durch die es einfach unmöglich war einige Filme sauber vom Rechner ins Wohnzimmer an den TV zu streamen. Der in meinem TV verbaute Soundchip schafft es einfach nicht gestreamten DTS Sound, ohne ständiges nachladen, flüssig abzuspielen. Also musste was neues her!<!-- more --> Der Plex Media Server bot sich an, da ich ihn einerseits schon vor Ewigkeiten mal auf dem Rechner installiert hatte und andererseits in diversen Blogs und Foren immer wieder von ihm, als sehr gute Alternative zum PS3 Media Server, gesprochen wurde. Warum ich damals nicht direkt bei Plex geblieben bin weiß ich heute gar nicht mehr so recht, es war eine sehr frühe Version soviel ist klar und die lief dementsprechend weniger gut als der PS3 Media Server. Ich wollte etwas einfaches, schnelles und unkompliziertes. Das war damals bei Plex eben alles andere als gegeben. Heute sieht es definitiv anders aus. Der Plex Server rennt wie eine eins ohne Murren und Zickerei bisher. Ich habe keine Ruckler mehr, selbst bei Filmen in denen mir nur eine DTS Tonspur zur Verfügung steht. Plex hat eine Option um DTS Tonspuren on-the-fly in normales Stereo zu konvertieren. Außerdem habe ich mit Plex den großen Vorteil, dass mir meine Mediensammlung (Filme, Musik, Serien) nun auch sehr komfortabel von Unterwegs aus zur Verfügung steht. Das war mit dem PS3 Media Server nur über sehr umständliche Wege machbar. Plex bietet für die beiden großen mobilen Systeme (iOS, Android) super Apps an und auch eine Web-App steht bereit. So genug erzählt, komme ich nun mal zur Installation des Servers selbst.</p>

<p>Als erstes laden wir uns mal das Paket von der Plex Seite auf unseren Rechner und installieren es.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://downloads.plexapp.com/plex-media-server/0.9.8.18.290-11b7fdd/plexmediaserver_0.9.8.18.290-11b7fdd_amd64.deb
</span><span class='line'>dpkg -i plexmediaserver_0.9.8.18.290-11b7fdd_amd64.deb
</span></code></pre></td></tr></table></div></figure>


<p>
Haben wir das erledigt, stoppen wir den automatisch gestarteten Plex Server und öffnen die Konfiguration um den User, unter welchem Plex ausgeführt wird, zu ändern. In meinem Fall von <code>plex</code> zu <code>ikarus</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service plexmediaserver stop
</span><span class='line'>sudo nano /etc/default/plexmediaserver
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PLEX_MEDIA_SERVER_USER</span><span class="o">=</span>ikarus
</span></code></pre></td></tr></table></div></figure>


<p>
Darauf folgend muss unser User noch der Gruppe <code>plex</code> hinzugefügt werden. Außerdem sollte man allen Verzeichnissen und den enthaltenen Medien, die der Plex Server verwalten soll, die entsprechenden Berechtigungen geben.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo usermode -aG plex ikarus
</span><span class='line'>find /verzeichnis/ -type d -exec chmod <span class="m">755</span> <span class="o">{}</span> +
</span><span class='line'>find /verzeichnis/ -type f -exec chmod <span class="m">644</span> <span class="o">{}</span> +
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Haben wir auch das bewerkstelligt kann der Plex Media Server wieder gestartet und über die URL <code>http://localhost:32400/manage/index.html</code> das Frontend bedient werden.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service plexmediaserver start
</span></code></pre></td></tr></table></div></figure>


<p>
Alles weitere zum Einstellen des Plex Media Servers selbst, also welche Verzeichnisse nun tatsächlich verwaltet werden sollen, welche Metadaten Datenbank verwendet wird und und und ist zum Einen ziemlich selbsterklärend im Frontend gelöst und zum Anderen auf der Website von Plex selbst auch noch einmal gut mit Bildern und Erklärungen verdeutlicht. Viel Spaß beim selber Einrichten :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Default User und Swap Grösse des Raspberry Pi ändern]]></title>
    <link href="http://nlsltz.github.io/2014/02/09/default-user-und-swap-grosse-des-raspberry-pi-andern/"/>
    <updated>2014-02-09T17:42:43+01:00</updated>
    <id>http://nlsltz.github.io/2014/02/09/default-user-und-swap-grosse-des-raspberry-pi-andern</id>
    <content type="html"><![CDATA[<p>Es regnet, schmuddel Wetter - also Raspberry Pi ausgepackt und bisschen was dran basteln. Da ich vor habe, meinen Raspi später einmal auch über das Internet erreichbar zu machen, soll der Standard User von <code>pi</code> in einen beliebigen Namen meiner Wahl abgeändert werden. Das erschwert zum einen möglichen Angreifern den Zugang, da sie zusätzlich zum Passwort auch noch den User ermitteln müssten, und zum anderen mag ich es einfach lieber wenn auf all meinen Geräten mein User den selben Namen trägt. Außerdem habe ich mir gedacht, wenn ich schon mal dabei bin erhöhe ich doch direkt die Swap Grösse, welche in der Standard Konfiguration vom Raspbian OS auf 100 MByte gesetzt wird. So am Rande, die <a href="https://wiki.debian.org/Swap">Swap Datei</a> - unter Windows auch gerne Auslagerungsdatei genannt - ist eine Art virtueller Arbeitsspeicher zusätzlich zum schon vorhandenen physischen Arbeitspeicher. Später soll mein Raspi einen Webserver inklusive einer Datenbank, ein kleines Wiki und vermutlich eine private Dropbox alternative beherbergen. Damit diese Services den Kleinen nicht direkt in Knie zwingen, die Erhöhung der Swap Datei.<!-- more --></p>

<p>So kommen wir zum eingemachten. Starten werde ich mit dem Ändern des Default User. Wir benötigen einen extra User kurzzeitig, von welchem aus wir dann den eigentlichen User bearbeiten werden. Für diesen User soll auch kein extra <code>/home/</code> Verzeichnis angelegt werden, da unnötig.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo adduser --no-create-home interim
</span></code></pre></td></tr></table></div></figure>


<p>
Dieser neu erstellte User wird noch in die <code>sudoers</code> Liste eingetragen, damit er sich zeitweilig Root-Rechte über das <code>sudo</code> Kommando holen darf. Anschließend kann die Liste gespeichert(Strg+O) und geschlossen(Strg+X), sowie sich komplett vom Raspi abgemeldet werden.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo visudo
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>interim <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD: ALL
</span></code></pre></td></tr></table></div></figure>


<p>
Jetzt meldet man sich mit dem eben erstellten <code>interim</code> User wieder an. Der <code>pi</code> User wird dann durch folgenden Befehl umbenannt. Das <code>/home/</code> Verzeichnis nehmen wir direkt mit, damit vorher dort gespeicherte Daten nicht verloren gehen. In meinem Fall soll der <code>pi</code> User in <code>ikarus</code> umbenannt werden. Jeder User hat auch noch seine eigene Gruppe mit selbem Namen, daher müssen wir diese auch mit umbenennen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo usermod --move-home --login ikarus --home /home/ikarus pi
</span><span class='line'>sudo groupmod -n ikarus pi
</span></code></pre></td></tr></table></div></figure>


<p>
Ist das vollbracht löschen wir aus der <code>sudoers</code> Liste noch den vorhin eingetragenen <code>interim</code> User und natürlich ändern wir den <code>pi</code> User so ab, dass er auf den von uns gewählten neuen User passt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo visudo
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pi <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD: ALL     <span class="c">#pi ändern zu ikarus</span>
</span><span class='line'>interim <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD:ALL <span class="c">#kann wieder gelöscht werden</span>
</span></code></pre></td></tr></table></div></figure>


<p>
So noch den <code>interim</code> User und Gruppe löschen und dann sind wir damit auch fast fertig. Lediglich zwei Einträge im <code>raspi-config</code> Script und in der <code>lightDM</code> Konfiguration müssen wir noch vom <code>pi</code> User auf den Neuen ändern. Innerhalb von Nano lässt sich über <code>Strg+W</code> leicht die Textpassage suchen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo deluser interim <span class="o">&amp;&amp;</span> sudo delgroup interim
</span><span class='line'>sudo sed /etc/lightdm/lightdm.conf -i -e <span class="s2">&quot;s/^#autologin-user=.*/autologin-user=ikarus/&quot;</span>
</span><span class='line'>sudo nano /usr/bin/raspi-config
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> id -u pi &gt; /dev/null 2&gt;<span class="p">&amp;</span>1<span class="p">;</span> <span class="k">then</span>
</span></code></pre></td></tr></table></div></figure>


<p>
zu</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> id -u ikarus &gt; /dev/null 2&gt;<span class="p">&amp;</span>1<span class="p">;</span> <span class="k">then</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Zum Schluss noch eben das <code>raspi-config</code> Script aufgerufen und unter dem Punkt <code>Enable Boot to Desktop/Scratch</code> die Option <code>Desktop Log in as user ‘pi’ at the graphical desktop</code> bestätigen. Die <code>raspi-config</code> kann danach direkt erneut aufgerufen werden um den Boot zur Konsole wieder einzustellen. Ein Reboot besiegelt das ganze.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo raspi-config
</span><span class='line'>sudo reboot
</span></code></pre></td></tr></table></div></figure>


<p>
Um die Swap Grösse zu ändern reichen 5 einfache Shell Kommandos aus. Beginnen wir damit uns als Root User anzumelden, gefolgt von der Angabe der Grösse, des neuen Swap, und dem generieren dieser Swap Datei. Als Faustregel gilt <strong>SWAP = Arbeitspeicher * 2</strong>, demnach stelle ich für meinen Raspi eine Swap Grösse von 1024 MByte ein.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo <span class="nb">echo</span> <span class="s2">&quot;CONF_SWAPSIZE=1024&quot;</span> &gt; /etc/dphys-swapfile
</span><span class='line'>sudo dphys-swapfile setup
</span></code></pre></td></tr></table></div></figure>


<p>
Die Swap Datei wurde generiert und wird mit folgendem Kommando noch aktiviert. Danach kann man sich als Root User wieder abmelden.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo dphys-swapfile swapon
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Tadaaa, wir haben unserem Raspi einen neuen Usernamen verpasst und seinen Swap erhöht.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://nlsltz.github.io/2014/02/07/hello-world/"/>
    <updated>2014-02-07T16:29:41+01:00</updated>
    <id>http://nlsltz.github.io/2014/02/07/hello-world</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://nlsltz.github.io/images/2014-02-07-16-15-32.jpg" width="350" height="350" title="Mein Raspberry Pi" alt="Mein Raspberry Pi">Da ist er nun, mein erster Beitrag in meinem eigenen Blog. Gute 2 Jahre hat es gedauert bis ich mich dazu durch gerungen habe ihn tatsächlich zu erstellen. Wie der Blog Titel schon verrät will ich hier immer mal wieder meine Errungenschaften mit Linux, dem Raspberry Pi, Android sowie sonstigem Kram nieder schreiben. Den Anfang machen möchte ich mit einer kleinen Step-to-Step Anleitung wie ich meinen Raspberry Pi als PHP Webserver eingerichtet habe.<!-- more --></p>

<p>Kurz für alle die nicht wissen was ein Raspberry Pi ist. Das ist ein kleiner Einplatinen-Computer, angetrieben von einer 700 MHz ARM CPU mit 512 MB RAM, einem Grafikchip der die Videoausgabe auch in 1080p Full HD schafft. Als Speicher kommt eine SD Karte zum Einsatz, zusätzlich lassen sich über die beiden USB 2.0 Ports noch weitere Medien anschließen. An meinem Pi hängt noch ein USB Hub mit externer Stromzufuhr um nicht auf die beiden vorhandenen Ports limitiert zu sein.</p>

<p>Soviel zum Pi selbst kommen wir nun zur Einrichtung des Webservers. Ich habe mich nach ein wenig Recherche auf Google dazu entschlossen <a href="http://wiki.nginx.org/Main">Nginx</a> einzusetzen, da der Apache wohl zu <a href="http://www.jeremymorgan.com/blog/programming/raspberry-pi-web-server-comparison/">Ressourcen hungrig</a> ist. Als erstes mal über SSH auf den Pi verbinden. In meinem Fall ist der User <code>root</code> und mein Pi im Netzwerk als <code>raspberrypi</code> bekannt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh root@raspberrypi
</span></code></pre></td></tr></table></div></figure>


<p>Auf dem Pi selbst aktualisieren wir die Paketlisten und installieren dann mit <code>apt</code> den Webserver Nginx und PHP mit ein paar Erweiterungen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get install nginx php5 php5-fpm php-apc php5-mcrypt php5-cli php5-gd
</span></code></pre></td></tr></table></div></figure>


<p>Nachdem Nginx inkl. seiner Abhängigkeiten installiert wurde optimieren wir als erstes die sog. Worker Prozesse &amp; Connections um sie an den Pi anzupassen. Dies geht mittels <code>sed</code> oder Manuell in der Datei <code>/etc/nginx/nginx.conf</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo sed -i <span class="s2">&quot;s/worker_processes 4;/worker_processes 1;/g&quot;</span> /etc/nginx/nginx.conf
</span><span class='line'>sudo sed -i <span class="s2">&quot;s/worker_connections 768;/worker_connections 128;/g&quot;</span> /etc/nginx/nginx.conf
</span></code></pre></td></tr></table></div></figure>


<p>
Nun noch den Webserver starten mittels folgendem Befehl und dann im Browser über die IP Adresse des Pi schauen ob ein <em>Welcome to nginx</em> einem bestätigt das alles läuft.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service nginx restart
</span></code></pre></td></tr></table></div></figure>


<p>Der Webserver verrichtet seinen Dienst, allerdings ist er noch absolut jungfräulich was seine Einstellungen betrifft. Das ändern wir jetzt. Um zu verstehen wieso wir das tun was wir jetzt tun muss man wissen wie Nginx arbeitet. Beim Start des Dienstes überprüft Nginx den Ordner <code>/etc/nginx/sites-enabled/</code> nach Konfigurationsdateien für die <a href="http://de.wikipedia.org/wiki/Virtual_Hosting">vHosts</a>. Üblicherweise werden in diesem Ordner aber keine Dateien selbst liegen sondern nur Symlinks die auf die Konfigdateien im Ordner <code>/etc/nginx/sites-availabe/</code> verweisen. Will man beispielsweise eine Seite nicht mehr weiter verteilen reicht es völlig aus dessen Symlink zu entfernen. Weiter ist die Standard Konfiguration nicht grade optimal, in Bezug auf den Speicherort der ausgelieferten Seite. Im großen Linux Universum hat sich das Verzeichnis <code>/var/www/</code> als de Facto Standard entpuppt, Nginx zeigt jedoch im auslieferungszustand auf <code>/usr/share/nginx/www/</code>. Diese Unstimmigkeiten ändern wir nun. Außerdem konfigurieren wir den PHP Support damit Nginx auch dynamische Webseiten, die mit PHP erstellt wurden, ausliefern kann.</p>

<p>Stoppen wir zuerst den Webserver und entfernen den Symlink des Standard vHost.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service nginx stop
</span><span class='line'>sudo unlink /etc/nginx/sites-enabled/default
</span></code></pre></td></tr></table></div></figure>


<p>
Jetzt legen wir einen neuen vHost in <code>/etc/nginx/sites-availabe/mysite</code> mit folgendem Inhalt an. Dadurch lauscht Nginx auf Port 80 und verteilt im Falle einer Anfrage die Dateien aus dem Verzeichnis <code>/var/www/</code>. Der <code>location</code> Block ist für den PHP Support zuständig. Er sagt Nginx das jegliche Anfragen die auf <code>.php</code> enden an den PHP Interpreter weiter gereicht werden. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo touch /etc/nginx/sites-availabe/mysite
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Nginx Site Config File</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>server <span class="o">{</span>
</span><span class='line'>        listen 80<span class="p">;</span>
</span><span class='line'>        root /var/www<span class="p">;</span>
</span><span class='line'>        index index.php index.html index.htm<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        location ~ <span class="o">[</span>^/<span class="o">]</span>.php<span class="o">(</span>/<span class="p">|</span><span class="nv">$)</span> <span class="o">{</span>
</span><span class='line'>                try_files <span class="nv">$uri</span> <span class="o">=</span>404<span class="p">;</span>
</span><span class='line'>                fastcgi_split_path_info ^<span class="o">(</span>.+?.php<span class="o">)(</span>/.*<span class="o">)</span><span class="nv">$;</span>
</span><span class='line'>                fastcgi_pass unix:/var/run/php5-fpm.sock<span class="p">;</span>
</span><span class='line'>                fastcgi_index index.php<span class="p">;</span>
</span><span class='line'>                include fastcgi_params<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
So nun <a href="http://wiki.ubuntuusers.de/ln#Symbolische-Verknuepfungen">symlinken</a> wir noch den erstellten vHost in den Ordner <code>/etc/nginx/sites-enabled/</code>, deaktivieren in der <code>php.ini</code> den <code>CGI.PATH_INFO</code> fix und starten Nginx und PHP5-FPM.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s /etc/nginx/sites-available/mysite /etc/nginx/sites-enabled/mysite
</span><span class='line'>sudo sed -i <span class="s2">&quot;s/^;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/&quot;</span> /etc/php5/fpm/php.ini
</span><span class='line'>sudo service php5-fpm restart
</span><span class='line'>sudo service nginx restart
</span></code></pre></td></tr></table></div></figure>


<p>
Jetzt kann jede Webseite Seite, die im Ordner <code>/var/www/</code> liegt, von Nginx verteilt werden.</p>

<p>Er ist doch um einiges länger geworden als ich zu erst gedacht hatte, aber gut :)</p>
]]></content>
  </entry>
  
</feed>
